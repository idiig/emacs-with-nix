:PROPERTIES:
:GPTEL_MODEL: gpt-4o-mini
:GPTEL_BACKEND: ChatGPT
:GPTEL_SYSTEM: You are a large language model living in Emacs and a helpful assistant. Respond concisely.
:GPTEL_BOUNDS: nil
:END:
#+TITLE: 基于 Nix Flakes 的 Emacs 配置

* 本配置的用法
:PROPERTIES:
:header-args: :tangle no
:END:

这份配置文件使用Nix Flakes管理包。使用Nix的这类系统管理的包的目的主要
是因为

- emacs内置的包管理器无法处理系统工具的依存：如 =ripgrep=, 特定版本的
  =python=

- 使用gitsubmodule相同

- 完全使用Nix的话，写配置和尝试包的体验感比较差

这份配置的解决法如下：

- 通过org-babel同时写作Nix和elisp。前者用于版本和包的管理，后者用于包
  的配置

- 可以在elisp中用 =$pkgs.git= 的方式直接引用Nix的包
  
- 提供一个函数加入一个新包时使用这个函数更新包列表

* 实现方式
:PROPERTIES:
:header-args: :tangle no
:END:

下面以配置 =Magit= 为例说明这个配置的方法。这里和大多数的配置一样我们
把整体目的一致的包放在一个集群实现。每个集群主要分成两个子节点，一个用
于安装包和依赖项，一个用于配置。配置部分可以细分为键位绑定，custom，
hook，config，自定义的函数。

依赖的部分可以从 =pkgs=[fn::=nixpkgs.legacyPackages.${system}=] 同时安
装emacs外部的依赖。然后从 =epkgs=[fn::=pkgs.emacs.pkgs.withPackages=]

这里稍微多做一些解释。在配置节里面，我们利用了org-babel的一些特性。首
先我们在一个汇总代码块中使用了 =:noweb=yes= ，然后在后面的代码块中我们
使用 =:noweb-ref= 参照汇总代码块，最后后续的这些代码块都会在tangle时合
并到第一个代码块中。这个被tangle的代码块在后续过程中会被nix依赖代码读
入作为配置。

* 如何使用？
:PROPERTIES:
:header-args: :tangle no
:END:

用emacs打开本文档， =M-x org-babel-tangle= 或使用快捷键 =C-c C-v t= 生
成flake.nix。接下去运行可以通过如下方式：

** 调试
#+begin_src sh
  nix run <path/to/this/config>.#emacs
  source ~/.bashrc
  emacs
#+end_src

** 版本回滚

- 使用git：
#+begin_src sh
  git checkout <previous-commit>
  nix run
  source ~/.bashrc
  emacs
#+end_src

- 备份lock文件：
#+begin_src sh
  # 查看以前的版本
  nix flake metadata

  # 备份版本
  cp flake.lock flake.lock.bachup
  # 使用特定锁文件版本
  nix run --recreate-lock-file --inputs-from ./flake.lock.backup
#+end_src

* 配置本体
:PROPERTIES:
:header-args: :tangle no
:END:

** Flake 入口

包的安装基于下面的 =flake.nix= 和 =init.nix= 。

#+BEGIN_SRC nix :tangle flake.nix :noweb yes
  {
    description = "idiig's Emacs Configuration with Nix Flakes";

    inputs = {
      nixpkgs.url = "github:NixOS/nixpkgs/nixos-24.11";
      flake-utils.url = "github:numtide/flake-utils";
      emacs-overlay.url = "github:nix-community/emacs-overlay";
    };

    outputs = { self, nixpkgs, flake-utils, emacs-overlay }:
      flake-utils.lib.eachDefaultSystem (system:
	let
		pkgs = import nixpkgs {
			inherit system;
			overlays = [ emacs-overlay.overlay ];
		};

		# 主配置文件
		emacsConfig = pkgs.writeText "init.el" ''
  <<emacs-config>>
	  '';

		# early-init 配置文件
		emacsEarlyInitConfig = pkgs.writeText "early-init.el" ''
  <<emacs-early-init-config>>
	  '';

		# emacs 和包
		emacsWithPackages = pkgs.emacs.pkgs.withPackages (epkgs: (with epkgs; [
	    <<emacs-packages>>
		]));

		# 输出配置到 .emacs.d
		autoExportConfig = pkgs.writeShellScriptBin "auto-export-config" ''
	    #!/usr/bin/env bash
	    set -e

	    # 导出配置到 .emacs.d
	    mkdir -p "$HOME/.emacs.d"
	    ${pkgs.rsync}/bin/rsync ${emacsConfig} "$HOME/.emacs.d/init.el"
	    ${pkgs.rsync}/bin/rsync ${emacsEarlyInitConfig} "$HOME/.emacs.d/early-init.el"

      # 路径
      <<dependencies>>

	    # 更新Emacs路径
      sed -i '/^alias emacs=/d' "$HOME/.bashrc"
      echo 'alias emacs='"${emacsWithPackages}/bin/emacs" >> "$HOME/.bashrc"
      source "$HOME/.bashrc"

	    echo "Emacs配置已同步到 $HOME/.emacs.d/"
	  '';
	in {
		packages = {
			default = autoExportConfig;
		};

	}
      );
  }
#+END_SRC

** Early init
:PROPERTIES:
:header-args: :noweb-ref emacs-early-init-config
:END:

#+begin_src emacs-lisp
  ;; 增加 GC 阈值，加快启动
  (setq gc-cons-threshold 402653184 gc-cons-percentage 0.6)

  ;; 启动完成后恢复正常 GC 设定
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (setq gc-cons-threshold 10485760
		    gc-cons-percentage 0.1)))
#+end_src

** Emacs基建
*** 更好的默认设置
**** 本体的设定
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

***** 关闭警告声
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

***** 确认使用y或n

而不是yes或no。
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

***** 在选中区域的状态下 =C-w= 删除选中的区域

而不是删除上一个合并区域。
#+begin_src emacs-lisp
  (defun backward-kill-word-or-region (&optional arg)
    (interactive "p")
    (if (region-active-p)
	(call-interactively #'kill-region)
      (backward-kill-word arg)))
#+end_src

***** 光标跳到新窗口

emacs在打开新的窗口时，默认光标维持在原来的窗口。比如当你使用
=describe-function= 时，光标不会跳到函数的简介窗口。在这类窗口我们本身
可以按 =q= 来退出和关闭窗口。所以跳转到新窗口非常便利。

- 专用buffer（display-buffer行为；主要影响 Emacs 自动创建的窗口（如
  help、compilation 等）。注意这里也会影响到 =magit= 这类 transient 窗
  口
#+begin_src emacs-lisp
  (setq switch-to-buffer-obey-display-actions t)
  (setq switch-to-buffer-in-dedicated-window 'pop)
  (customize-set-variable 'display-buffer-base-action
    '((display-buffer-reuse-window display-buffer-same-window)
      (reusable-frames . t)))
#+end_src

- split-window时转跳到新窗口
#+begin_src emacs-lisp
  (defadvice split-window-below (after split-window-below-and-switch activate)
    "切换到新分割的窗口"
    (when (called-interactively-p 'any)
      (other-window 1)))

  (defadvice split-window-right (after split-window-right-and-switch activate)
    "切换到新分割的窗口"
    (when (called-interactively-p 'any)
      (other-window 1)))
#+end_src

***** 窗口的放大缩小转变为持续的行为
而不是要一直要重复 =C-x= 按键。后续行为使用默认 =^/V/{/}=

这里我没用 =C-x v= 是因为这个键位目前用于 =vc=。

#+begin_src emacs-lisp
  ;; (global-set-key (kbd "C-x V") shrink-window)

  (defun idiig/window-adjust (orig-fun &rest args)
    "使用 Emacs 风格按键 (^, V, {, }, +) 持续调整窗口大小。"
    (let* ((ev last-command-event)
	   (echo-keystrokes nil))
      ;; 执行初始调整
      (apply orig-fun args)

      ;; 设置 transient map
      (let ((delta (car args))) 
	(set-transient-map
	 (let ((map (make-sparse-keymap)))
	   ;; 垂直调整
	   (define-key map (kbd "^")
		       `(lambda () (interactive) (enlarge-window ,delta nil)))
	   (define-key map (kbd "V")
		       `(lambda () (interactive) (shrink-window ,delta nil)))

	   ;; 水平调整
	   (define-key map (kbd "{")
		       `(lambda () (interactive) (shrink-window ,delta t)))
	   (define-key map (kbd "}")
		       `(lambda () (interactive) (enlarge-window ,delta t)))

	   ;; 平衡窗口
	   (define-key map (kbd "+")
		       (lambda () (interactive) (balance-windows)))
	   map)
	 nil nil
	 "Use %k for further adjustment"))))

  ;; ;; 如果需要移除 advice:
  ;; (advice-remove 'enlarge-window #'idiig/window-adjust)
  ;; (advice-remove 'shrink-window #'idiig/window-adjust)
  ;; (advice-remove 'enlarge-window-horizontally #'idiig/window-adjust)
  ;; (advice-remove 'shrink-window-horizontally #'idiig/window-adjust)

  ;; 添加 advice
  (advice-add 'enlarge-window :around #'idiig/window-adjust)
  (advice-add 'shrink-window :around #'idiig/window-adjust)
  (advice-add 'enlarge-window-horizontally :around #'idiig/window-adjust)
  (advice-add 'shrink-window-horizontally :around #'idiig/window-adjust)
#+end_src

**** 检索（ctrlf）

针对当前buffer利用 =Ctrlf= 而不在使用swiper和helm这类型的检索方式。
***** 依赖
:PROPERTIES:
:header-args: :noweb-ref emacs-packages
:END:

#+BEGIN_SRC nix 
  ctrlf
#+END_SRC

***** 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

#+begin_src emacs-lisp
  (require 'ctrlf)
  (ctrlf-mode +1)
#+end_src

** CJK字体

这里我统一使用的是Sarasa的等宽字体，可以避免2个问题：
- 输入latin以后输入cjk文字以后，由于字体高度不等导致行高抖动
- 方便org等表格等宽表示

*** 依赖
:PROPERTIES:
:header-args: :noweb-ref dependencies
:END:
#+begin_src sh
  mkdir -p "$HOME/.local/share/fonts/truetype/"
  ${pkgs.rsync}/bin/rsync -av ${pkgs.sarasa-gothic}/share/fonts/truetype/ "$HOME/.local/share/fonts/sarasa-gothic/"
  fc-cache -f -v ~/.local/share/fonts/
#+end_src

*** 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

#+begin_src emacs-lisp
  (add-hook 'after-init-hook
	    (lambda ()
	      (let ((my-font-height 130)
		    (my-font "Sarasa Mono SC"))
		(set-face-attribute 'default nil :family my-font :height my-font-height))))

  ;; 工具栏，菜单保持默认字体
  (set-face-attribute 'menu nil :inherit 'unspecified)
  (set-face-attribute 'tool-bar nil :inherit 'unspecified)
#+end_src

** 日文

*** 输入法

**** 依赖
:PROPERTIES:
:header-args: :noweb-ref emacs-packages
:END:

#+BEGIN_SRC nix 
  ddskk
#+END_SRC

**** 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x j") 'skk-mode)

  (with-eval-after-load 'ddskk
    (setq skk-server-inhibit-startup-server nil)
    (setq skk-server-host "localhost")
    (setq skk-server-portnum 55100)
    (setq skk-share-private-jisyo t)

    ;; 候补显示设置
    (setq skk-show-inline t)
    (setq skk-show-tooltip t)
    (setq skk-show-candidates-always-pop-to-buffer t)
    (setq skk-henkan-show-candidates-rows 2)

    ;; 行为设置
    (setq skk-egg-like-newline t)
    (setq skk-delete-implies-kakutei nil)
    (setq skk-use-look t)
    (setq skk-auto-insert-paren t)
    (setq skk-henkan-strict-okuri-precedence t)

    ;; 加载额外功能
    (require 'skk-hint)
    (add-hook 'skk-load-hook
	      (lambda ()
		(require 'context-skk)))

    ;; 片假名转换设置
    (setq skk-search-katakana 'jisx0201-kana))

  ;; (require 'ddskk nil t)
#+end_src

*** TODO 检索（Migemo）
**** 依赖
:PROPERTIES:
:header-args: :noweb-ref emacs-packages
:END:
**** 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

** 中文

*** 输入法

**** 依赖
:PROPERTIES:
:header-args: :noweb-ref emacs-packages
:END:

#+BEGIN_SRC nix 
  # (pkgs.emacsPackages.pyim.overrideAttrs (old: {
  #     nativeComp = false;
  # }))
  pyim
  pyim-basedict
#+END_SRC

**** 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

***** 基础设定
#+begin_src emacs-lisp
  (with-eval-after-load 'pyim
    ;; 基本设置
    (setq default-input-method "pyim")
    (setq pyim-dcache-directory "~/.emacs.d/.cache/pyim/dcache/")
    ;; 输入法设置为全拼
    (setq pyim-default-scheme 'quanpin)
    ;; 启用搜索功能
    (pyim-isearch-mode 1)
    ;; 选词框设置
    (setq pyim-page-tooltip 'popup)
    (setq pyim-page-length 5)
    ;; 加载并启用基础词库
    (require 'pyim-basedict)
    (pyim-basedict-enable))

  ;; diminish 设置 (如果使用 diminish)
  (with-eval-after-load 'diminish
    (diminish 'pyim-isearch-mode))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'pyim
    (require 'pyim-cstring-utils)

    ;; C-return 把当前选中的位置转换为正则表达
    (define-key minibuffer-local-map (kbd "C-<return>") 'pyim-cregexp-convert-at-point)

    ;; 中文状态下的前进后退词
    (global-set-key (kbd "M-f") 'pyim-forward-word)
    (global-set-key (kbd "M-b") 'pyim-backward-word)
    )
#+end_src

***** 正则表达交互

***** Orderless交互
#+begin_src emacs-lisp
  ;; 确保在 orderless 加载后再加载这些配置
  (with-eval-after-load 'orderless
    ;; 拼音检索字符串功能
    (defun zh-orderless-regexp (orig_func component)
      (call-interactively #'pyim-activate)
      (call-interactively #'pyim-deactivate)
      (let ((result (funcall orig_func component)))
	(pyim-cregexp-build result)))
    (advice-add 'orderless-regexp :around #'zh-orderless-regexp))
#+end_src

** Git相关配置

*** 依赖
:PROPERTIES:
:header-args: :noweb-ref emacs-packages
:END:

**** Magit
#+BEGIN_SRC nix
  magit
#+END_SRC

**** Git 目录路径
#+begin_src emacs-lisp  :noweb-ref emacs-config
  (add-to-list 'exec-path "${pkgs.git}/bin")
#+end_src

*** 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

**** Magit

***** 基础设定
#+BEGIN_SRC emacs-lisp
  (require 'magit)
#+END_SRC

** 编程语言
*** 我有可能使用的语言
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

#+begin_src emacs-lisp
  (defvar idiig/language-list
    '("emacs-lisp" "python" "C" "shell" "js" "clojure" "css" "nix"
      "dot" "gnuplot" "R" "sql" "awk" "haskell" "latex" "lisp"
      "org" "julia" "scheme" "sqlite")
    "支持的编程语言列表。")
#+end_src

** Org Mode相关配置
*** Org本体
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

**** 函数与advice

=org-insert-structure-template= 后选择 =s= (src block) 时自动提示插入代码块的语言

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (defun idiig/org-insert-structure-template-src-advice (orig-fun type)
      "Advice for org-insert-structure-template to handle src blocks."
      (if (string= type "src")  ; 判断条件为 "src"
	  (let ((selected-type (ido-completing-read "Source code type: " idiig/language-list)))
	    (funcall orig-fun (format "src %s" selected-type)))
	(funcall orig-fun type)))

    (advice-add 'org-insert-structure-template :around #'idiig/org-insert-structure-template-src-advice))
#+end_src

**** 代码块支持语言
***** 依赖
由于 =ob-nix= 还没有默认。我们需要添加这些依赖

#+begin_src nix :noweb-ref emacs-packages
  ob-nix
#+end_src

***** 配置
#+begin_src emacs-lisp
  (defun idiig/load-org-babel-languages ()
    "根据 `idiig/language-list` 启用 `org-babel` 语言。"
    (let ((languages '()))
      (dolist (lang idiig/language-list)
	(push (cons (intern lang) t) languages)) ;; 将字符串转换为符号
      (org-babel-do-load-languages 'org-babel-load-languages languages)))

  (add-hook 'org-mode-hook #'idiig/load-org-babel-languages)
#+end_src

**** TODO 基础设定

: custom
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-support-shift-select 2)  ; 允许shift用于选择
    ;; (require 'org-tempo)               ; 允许<Tab补齐org插入环境
    )
#+END_SRC

** AI辅助功能

*** 文档写作

**** gptel.el

***** 依赖
:PROPERTIES:
:header-args: :noweb-ref emacs-packages
:END:

#+BEGIN_SRC nix
  gptel
#+END_SRC

***** TODO 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

*** Aider

**** 依赖
:PROPERTIES:
:header-args: :noweb-ref emacs-packages
:END:

***** TODO Aider.el
#+BEGIN_SRC nix
  # aider
#+END_SRC

***** Aider 目录路径
#+begin_src emacs-lisp  :noweb-ref emacs-config
  (add-to-list 'exec-path "${pkgs.aider-chat}/bin")
#+end_src

**** TODO 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

** 模态编辑（Meow）
*** 依赖
:PROPERTIES:
:header-args: :noweb-ref emacs-packages
:END:
#+begin_src nix
  meow
  meow-tree-sitter
#+end_src

*** 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

#+begin_src emacs-lisp
  ;; (defalias 'meow-visit #'ctrlf-forward-default) ; 需要ctrlf

  ;; https://github.com/meow-edit/meow/blob/master/KEYBINDING_QWERTY.org
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))

  (require 'meow)
  (meow-setup)
  (meow-global-mode 1)
#+end_src

给meow增加treesitter的功能：
#+begin_src emacs-lisp
  (require 'meow-tree-sitter)
  (meow-tree-sitter-register-defaults)  
#+end_src

在 meow-edit 退出 insert-state 时，当前输入方式自动被关闭，而再次进入
insert-state 时重新打开输入方式：
#+begin_src emacs-lisp
  (defvar-local the-late-input-method nil)
  (add-hook 'meow-insert-enter-hook
	    (lambda ()
	      (activate-input-method the-late-input-method)))
  (add-hook 'meow-insert-exit-hook
	    (lambda ()
	      (setq the-late-input-method current-input-method)
	      (deactivate-input-method)))
#+end_src
