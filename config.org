:PROPERTIES:
:GPTEL_MODEL: gpt-4o-mini
:GPTEL_BACKEND: ChatGPT
:GPTEL_SYSTEM: You are a large language model living in Emacs and a helpful assistant. Respond concisely.
:GPTEL_BOUNDS: nil
:END:
#+TITLE: 基于 Nix Flakes 的 Emacs 配置

* 本配置的用法
:PROPERTIES:
:header-args: :tangle no
:END:

这份配置文件使用Nix Flakes管理包。使用Nix的这类系统管理的包的目的主要
是因为

- emacs内置的包管理器无法处理系统工具的依存：如 =ripgrep=, 特定版本的
  =python=

- 使用gitsubmodule相同

- 完全使用Nix的话，写配置和尝试包的体验感比较差

这份配置的解决法如下：

- 通过org-babel同时写作Nix和elisp。前者用于版本和包的管理，后者用于包
  的配置

- 可以在elisp中用 =$pkgs.git= 的方式直接引用Nix的包
  
- 提供一个函数加入一个新包时使用这个函数更新包列表

* 实现方式
:PROPERTIES:
:header-args: :tangle no
:END:

下面以配置 =Magit= 为例说明这个配置的方法。这里和大多数的配置一样我们
把整体目的一致的包放在一个集群实现。每个集群主要分成两个子节点，一个用
于安装包和依赖项，一个用于配置。配置部分可以细分为键位绑定，custom，
hook，config，自定义的函数。

依赖的部分可以从 =pkgs=[fn::=nixpkgs.legacyPackages.${system}=] 同时安
装emacs外部的依赖。然后从 =epkgs=[fn::=pkgs.emacs.pkgs.withPackages=]

#+begin_src org
#+end_src

这里稍微多做一些解释。在配置节里面，我们利用了org-babel的一些特性。首
先我们在一个汇总代码块中使用了 =:noweb=yes= ，然后在后面的代码块中我们
使用 =:noweb-ref= 参照汇总代码块，最后后续的这些代码块都会在tangle时合
并到第一个代码块中。这个被tangle的代码块在后续过程中会被nix依赖代码读
入作为配置。

* 运行
:PROPERTIES:
:header-args: :tangle no
:END:

运行可以通过如下方式

** 调试
#+begin_src sh
  nix run <path/to/this/config>.#emacs
#+end_src

** 构建后运行：
#+begin_src sh
  nix build <path/to/this/config>.#emacs
  <path/to/this/config>/result/bin/emacs
#+end_src

** 版本回滚
#+begin_src sh
  # 回滚到上一个版本
  nix profile rollback

  # 回滚到特定版本号
  nix profile history  # 查看 Flake 的输出历史
  nix profile rollback --to NUMBER 

  # 或者使用 profile 中的特定版本
  nix run /nix/store/xxx-profile-xxx#emacs
#+end_src

* 配置本体
:PROPERTIES:
:header-args: :tangle no
:END:

** Flake 入口

包的安装基于下面的 =flake.nix= 和 =init.nix= 。

#+BEGIN_SRC nix :tangle flake.nix :noweb yes
  {
    description = "idiig's Emacs Configuration with Nix Flakes";

    inputs = {
      nixpkgs.url = "github:NixOS/nixpkgs/nixos-24.11";
      flake-utils.url = "github:numtide/flake-utils";
      emacs-overlay.url = "github:nix-community/emacs-overlay";
    };

    outputs = { self, nixpkgs, flake-utils, emacs-overlay }:
      flake-utils.lib.eachDefaultSystem (system:
	let
	  pkgs = import nixpkgs {
	    inherit system;
	    overlays = [ emacs-overlay.overlay ];
	  };

	  # 主配置文件
	  emacsConfig = pkgs.writeText "init.el" ''
	    <<emacs-config>>
	  '';

	  # early-init 配置文件
	  emacsEarlyInitConfig = pkgs.writeText "early-init.el" ''
	    <<emacs-early-init-config>>
	  '';

	  emacsWithConfig = pkgs.emacs.pkgs.withPackages (epkgs: (with epkgs; [
	    (pkgs.runCommand "emacs-config-files" {} ''
	      mkdir -p $out/share/emacs/site-lisp
	      cp ${emacsConfig} $out/share/emacs/site-lisp/init.el
	      cp ${emacsEarlyInitConfig} $out/share/emacs/site-lisp/early-init.el
	    '')
	    <<emacs-packages>>
	  ]));
	in {
	  packages = {
	    emacs = emacsWithConfig;
	    default = emacsWithConfig;  # 用于nix run
	  };
	}
      );
  }
#+END_SRC

** Early init
:PROPERTIES:
:header-args: :noweb-ref emacs-early-init-config
:END:

#+begin_src emacs-lisp
  ;;(package-initialize)
  (setq gc-cons-threshold 402653184 gc-cons-percentage 0.6)

  (load "$out/share/emacs/site-lisp/init.el")

  (setq gc-cons-threshold 10485760
	gc-cons-percentage 0.1)
#+end_src

** 日文

*** 输入法

**** 依赖
:PROPERTIES:
:header-args: :noweb-ref emacs-packages
:END:

#+BEGIN_SRC nix 
  ddskk
#+END_SRC

**** 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

***** 输入法（DDSKK）
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x j") 'skk-mode)

  (with-eval-after-load 'ddskk
    (setq skk-server-inhibit-startup-server nil)
    (setq skk-server-host "localhost")
    (setq skk-server-portnum 55100)
    (setq skk-share-private-jisyo t)

    ;; 候补显示设置
    (setq skk-show-inline t)
    (setq skk-show-tooltip t)
    (setq skk-show-candidates-always-pop-to-buffer t)
    (setq skk-henkan-show-candidates-rows 2)

    ;; 行为设置
    (setq skk-egg-like-newline t)
    (setq skk-delete-implies-kakutei nil)
    (setq skk-use-look t)
    (setq skk-auto-insert-paren t)
    (setq skk-henkan-strict-okuri-precedence t)

    ;; 加载额外功能
    (require 'skk-hint)
    (add-hook 'skk-load-hook
	      (lambda ()
		(require 'context-skk)))

    ;; 片假名转换设置
    (setq skk-search-katakana 'jisx0201-kana))

  ;; (require 'ddskk nil t)
#+end_src

*** TODO 字体
**** 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

#+begin_src emacs-lisp
  (set-fontset-font t 'han (font-spec :file "${pkgs.sarasa-gothic}/share/fonts/truetype/sarasa-gothic.ttc"))
#+end_src

*** TODO 检索（Migemo）
**** 依赖
:PROPERTIES:
:header-args: :noweb-ref emacs-packages
:END:
**** 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

** 中文

*** 输入法

**** 依赖
:PROPERTIES:
:header-args: :noweb-ref emacs-packages
:END:

#+BEGIN_SRC nix 
  # (pkgs.emacsPackages.pyim.overrideAttrs (old: {
  #     nativeComp = false;
  # }))
  pyim
  pyim-basedict
#+END_SRC

**** 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

***** 基础设定
#+begin_src emacs-lisp
  (with-eval-after-load 'pyim
    ;; 基本设置
    (setq default-input-method "pyim")
    (setq pyim-dcache-directory "~/emacs-config/.cache/pyim/dcache/")
    ;; 按键绑定
    (define-key minibuffer-local-map (kbd "C-<return>") 'pyim-cregexp-convert-at-point)
    ;; 输入法设置
    (setq pyim-default-scheme 'quanpin)
    ;; 启用搜索功能
    (pyim-isearch-mode 1)
    ;; 选词框设置
    (setq pyim-page-tooltip 'popup)
    (setq pyim-page-length 5)
    ;; 加载并启用基础词库
    (require 'pyim-basedict)
    (pyim-basedict-enable))

  ;; ;; 加载 pyim 包
  ;; (require 'pyim nil t)

  ;; diminish 设置 (如果使用 diminish)
  (with-eval-after-load 'diminish
    (diminish 'pyim-isearch-mode))
#+end_src

***** Orderless交互
#+begin_src emacs-lisp
  ;; 确保在 orderless 加载后再加载这些配置
  (with-eval-after-load 'orderless
    ;; 拼音检索字符串功能
    (defun zh-orderless-regexp (orig_func component)
      (call-interactively #'pyim-activate)
      (call-interactively #'pyim-deactivate)
      (let ((result (funcall orig_func component)))
	(pyim-cregexp-build result)))
    (advice-add 'orderless-regexp :around #'zh-orderless-regexp))
#+end_src

** Git相关配置

*** 依赖
:PROPERTIES:
:header-args: :noweb-ref emacs-packages
:END:

**** Magit
#+BEGIN_SRC nix
  magit
#+END_SRC

**** Git 目录路径
#+begin_src emacs-lisp  :noweb-ref emacs-config
  (add-to-list 'exec-path "${pkgs.git}/bin")
#+end_src

*** 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

**** Magit

***** 基础设定
#+BEGIN_SRC emacs-lisp
  (require 'magit)
#+END_SRC

** Org Mode相关配置

*** Org本体
**** 依赖
**** 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

***** TODO 基础设定

: custom
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-support-shift-select 2))
#+END_SRC

** AI辅助功能

*** TODO 文档写作

**** gptel.el

***** 依赖
:PROPERTIES:
:header-args: :noweb-ref emacs-packages
:END:

#+BEGIN_SRC nix
  gptel
#+END_SRC

***** 配置
:PROPERTIES:
:header-args: :noweb-ref emacs-config
:END:

: custom
#+BEGIN_SRC emacs-lisp
#+END_SRC

